// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // for local development
  url      = env("DATABASE_URL")
  // for Vercel
  // url       = env("POSTGRES_PRISMA_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  USER
  VENDOR
  ADMIN
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  password   String
  role       Role         @default(USER)
}

enum Condition {
  excellent
  good
  fair
  poor
}

model Stuff {
  id        Int       @id @default(autoincrement())
  name      String
  quantity  Int
  condition Condition
  owner     String
}

model Location {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  restaurants Restaurant[]  // One-to-many relation: a location can have many restaurants
}

model Restaurant {
  id              Int         @id @default(autoincrement())
  postedById      Int
  locationId      Int?
  name            String      @unique
  website         String?
  phone           String?
  menuLink        String?
  onlineOrderLink String?
  image           String?
  latitude        Decimal?
  longitude       Decimal?
  location        Location?   @relation(fields: [locationId], references: [id]) // Relation setup
}

model FavoriteRestaurant {
  id              Int     @id @default(autoincrement())
  userFavoritedId Int
  restaurantFavoritedId Int
}

enum Topic {
  bug
  feature
  wronginformation
  other
}

model Issue {
  id          Int    @id @default(autoincrement())
  topic       Topic
  name        String?
  contactinfo String?
  description String
  createdAt   DateTime @default(now())
}